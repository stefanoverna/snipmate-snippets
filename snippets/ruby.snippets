snippet spec
	require 'spec_helper'
	
	describe '${1}' do
	  ${2}
	end

snippet c
	context '${1}' do
		${2}
	end

snippet f
	feature 'As ${1}' do
		${2}
	end

snippet s
	scenario '${1}' do
		${2}
	end

snippet d
	describe '${1}' do
	  ${2}
	end

snippet it
	it '${1}' do
	  ${2}
	end

snippet l
	let(:${1}) { ${2} }
	${0}

snippet b
	before do
	  ${1}
	end
	${0}
snippet su
	subject { ${1} }
	${0}

snippet a
	allow(${1}).to ${2}

snippet e
	expect(${1}).to ${2}

snippet n
	expect(${1}).not_to ${2}

snippet isvp
	it { should validate_presence_of(:${1}) }
	${0}

snippet isvu
	it { should validate_uniqueness_of(:${1}) }
	${0}

snippet isvus
	it { should validate_uniqueness_of(:${1}).scoped_to(${2}) }
	${0}

snippet isei
	it { should ensure_inclusion_of(:${1}).in_array(${2}) }
	${0}

snippet hm
	has_many :${1}, inverse_of: :${2}, dependent: :destroy

snippet bt
	belongs_to :${1}, inverse_of: :${2}

snippet ho
	has_one :${1}, inverse_of: :${2}

snippet vp
	validates :${1}, presence: true

snippet vu
	validates :${1}, uniqueness: true

snippet vus
	validates :${1}, uniqueness: { scope: ${2} }

snippet vi
	validates :${1}, inclusion: ${2}

snippet sc
	scope :${1}, -> { ${2} }

