snippet spec
	require 'spec_helper'
	
	describe ${1:`RubyClassNameFromFilename()`} do
	  ${2}
	end
	${0}
snippet class
	class ${1:`RubyClassNameFromFilename()`} do
	  {2}
	end
snippet c
	context '${1}' do
		${2}
	end
	${0}
snippet f
	feature 'As ${1}' do
		${2}
	end
	${0}
snippet s
	scenario '${1}' do
		${2}
	end
	${0}
snippet su
	subject(:${1}) { ${2} }
	${0}
snippet d
	describe '${1}' do
	  ${2}
	end
	${0}
snippet it
	it '${1}' do
	  ${2}
	end
	${0}
snippet l
	let(:${1}) { ${2} }
snippet b
	before do
	  ${1}
	end
	${0}
snippet a
	allow(${1}).to ${2}
snippet r
	receive(:${1})
snippet rw
	receive(:${1}).
	  with(${2})
snippet e
	expect(${1}).to ${0}
snippet hr
	have_received(:${1})
snippet hrw
	have_received(:${1}).
	  with(${2})
snippet n
	expect(${1}).not_to ${2}
snippet isvp
	it { should validate_presence_of(:${1}) }
snippet isvu
	it { should validate_uniqueness_of(:${1}) }
snippet isvus
	it { should validate_uniqueness_of(:${1}).scoped_to(${2}) }
snippet isei
	it { should ensure_inclusion_of(:${1}).in_array(${2}) }
snippet hm
	has_many :${1},
	  inverse_of: :${2},
	  dependent: :destroy
snippet bt
	belongs_to :${1},
	  inverse_of: :${2}
snippet ho
	has_one :${1}, 
	  inverse_of: :${2}
snippet vp
	validates :${1}, presence: true
snippet vu
	validates :${1}, uniqueness: true
snippet vus
	validates :${1}, uniqueness: { scope: ${2} }
snippet vi
	validates :${1}, inclusion: ${2}
snippet sc
	scope :${1}, -> { ${2} }
snippet saop
	save_and_open_page

